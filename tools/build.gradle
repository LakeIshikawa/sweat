apply plugin: "java"

sourceCompatibility = 1.7
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.SEmainClassName = "com.lksoft.sweat.tools.sceneeditor.SceneEditorLauncher"
project.ext.AEmainClassName = "com.lksoft.sweat.tools.animationeditor.AnimationEditorLauncher"
project.ext.SPREmainClassName = "com.lksoft.sweat.tools.spriteeditor.SpriteEditorLauncher"
project.ext.SETEmainClassName = "com.lksoft.sweat.tools.settingseditor.SettingsEditorLauncher"
project.ext.TPmainClassName = "com.lksoft.sweat.tools.texturepacker.TexturePackerLauncher"

project.ext.assetsDir = new File("./assets");

task runSE(dependsOn: classes, type: JavaExec) {
    main = project.SEmainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task distSE(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.SEmainClassName
    }

    baseName = 'SceneEditor'

    doLast {
        // Create batch
        File bat = new File(destinationDir, "scene-editor.bat")
        destinationDir.mkdirs();
        bat.write('java -jar _sweat\\' + archiveName + ' > _sweat\\scene-editor.log 2>&1')
    }
}

task distAE(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);

    manifest {
        attributes 'Main-Class': project.AEmainClassName
    }

    baseName = 'AnimationEditor'

    doLast {
        // Create batch
        File bat = new File(destinationDir, "animation-editor.bat")
        destinationDir.mkdirs();
        bat.write('java -jar _sweat\\' + archiveName + ' > _sweat\\animation-editor.log 2>&1')
    }
}

task distSPRE(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);

    manifest {
        attributes 'Main-Class': project.SPREmainClassName
    }

    baseName = 'SpriteEditor'

    doLast {
        // Create batch
        File bat = new File(destinationDir, "sprite-editor.bat")
        destinationDir.mkdirs();
        bat.write('java -jar _sweat\\' + archiveName + ' > _sweat\\sprite-editor.log 2>&1')
    }
}

task distSETE(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);

    manifest {
        attributes 'Main-Class': project.SETEmainClassName
    }

    baseName = 'SettingsEditor'

    doLast {
        // Create batch
        File bat = new File(destinationDir, "settings-editor.bat")
        destinationDir.mkdirs();
        bat.write('java -jar _sweat\\' + archiveName + ' > _sweat\\settings-editor.log 2>&1')
    }
}

task distTP(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);

    manifest {
        attributes 'Main-Class': project.TPmainClassName
    }

    baseName = 'TexturePacker'

    doLast {
        // Create batch
        File bat = new File(destinationDir, "texture-packer.bat")
        destinationDir.mkdirs();
        bat.write('java -jar _sweat\\' + archiveName + ' > _sweat\\texture-packer.log 2>&1')
    }
}

task dist(dependsOn: [clean, distSE, distAE, distSPRE, distSETE, distTP]){
}

distSE.dependsOn classes
distAE.dependsOn classes
distSPRE.dependsOn classes
distSETE.dependsOn classes
distTP.dependsOn classes