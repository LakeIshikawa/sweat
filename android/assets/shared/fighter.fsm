State setup
	[Enter]
	// Position
	S = 0  // Standing
	C = 1  // Crouching
	A = 2  // Air

	// Physics
	PhyNone = 0  	 // No physics
	PhyStanding = 1  // Standing
	PhyCrouching = 2 // Crouching
	PhyAir = 3 	 // Airing

	// Other player
	opponent = (name == "p1") ? getFSM("p2") : getFSM("p1")
	-> idle

State idle
	[Enter]
	status = S
	physics = PhyStanding
	priority = 0
	anim = A:idle
	ctrl = true
	layer = 5

	// Face
//	[Trigger !facing(opponent)]
//	-> turn

	// Walk
	[Trigger 
		1: keyhold("F") || keyhold("B")
		1: !(keyhold("F") && keyhold("B"))]
	-> walk
	
	// Jump
	[Trigger keyhold("U")]
	-> jumpstart
	
	// Crouch
	[Trigger keyhold("D")]
	-> stand2crouch


State walk
	[Enter]
	physics = PhyNone

	[Trigger keyhold("F") && !keyhold("B")]
	vel.x = speed.walk.fwd.x * (facing ? -1.0 : 1.0)
	anim = A:walkfwd

	[Trigger keyhold("B") && !keyhold("F")]
	vel.x = speed.walk.bwd.x * (facing ? -1.0 : 1.0)
	anim = A:walkbwd

	// Face
	[Trigger !facing(opponent)]
	-> turn

	// Stop walking
	[Trigger 
		1: !(keyhold("F") || keyhold("B"))
		2: keyhold("F") && keyhold("B")]
	-> idle

	// Jump
	[Trigger keyhold("U")]
	-> jumpstart
	
	// Crouch
	[Trigger keyhold("D")]
	-> stand2crouch

State turn
	[Enter]
	anim = A:turn

	[Trigger animCycles == 1]
	facing = !facing
	-> idle

State jumpstart
	[Enter]
	priority = 1
	anim = A:jumpstart

	// Jump up
	[Trigger animCycles == 1 && !(keyhold("F") || keyhold("B"))]
	anim = A:jumping
	vel.y = speed.jump.up
	-> jumping

	// Jump fwd
	[Trigger animCycles == 1 && keyhold("F")]
	anim = A:jumpingFwd
	vel.y = speed.jump.up
	-> jumping

	// Jump bwd
	[Trigger animCycles == 1 && keyhold("B")]
	anim = A:jumpingBwd
	vel.y = speed.jump.up
	-> jumping


State jumping
	[Enter]
	status = A
	physics = PhyAir

	// Controls
	[Trigger keyhold("F")]
	vel.x = speed.air.fwd.x * (facing ? -1.0 : 1.0)

	[Trigger keyhold("B")]
	vel.x = speed.air.bwd.x * (facing ? -1.0 : 1.0)

	// Landing
	[Trigger pos.y < 0.0]
	-> landing

State landing
	[Enter]
	anim = A:landing
	
	[Trigger animCycles == 1]
	-> idle

State stand2crouch
	[Enter]
	status = C
	physics = PhyCrouching
	priority = 1
	anim = A:stand2crouch

	[Trigger animCycles == 1]
	-> crouching

State crouching
	[Enter]
	anim = A:crouching
	priority = 0

	[Trigger !keyhold("D")]
	-> crouch2stand

State crouch2stand
	[Enter]
	anim = A:crouch2stand

	[Trigger animCycles == 1]
	-> idle
	
State running
	[Enter]
	anim = A:running
	vel.x = speed.run.fwd.x * (facing ? -1.0 : 1.0)

	[Trigger !keyhold("F")]
	->idle

State backhop
	[Enter]
	anim = A:backhop
	vel.x = speed.backhop.x * (facing ? -1.0 : 1.0)
	vel.y = speed.backhop.y
	physics = PhyAir

	// Landing
	[Trigger pos.y < 0.0]
	-> backhopland

State backhopland
	[Enter]
	anim = A:backhopland

	[Trigger animCycles == 1]
	-> idle
	
State midpunch
	[Enter]
	layer = 6
	anim = A:midpunch
	vel.x = 0.0
	ctrl = false
	attackhit = H:midpunch
	
	[Trigger animCycles == 1]
	-> idle

State groundDamage
	[Enter]
	physics = PhyNone

	[Trigger statetime == slidetime]
	-> idle
	
State airDamage
	[Enter]
	status = A
	physics = PhyAir
	
	// Landing
	[Trigger pos.y < 0.0]
	-> landing

// --
// -- Controls definition from any state that allows control
// --
Stateless
	// Run
	[Trigger ctrl && (status == S) && has(A:running) && C:run]
		-> running
	// Back-hop
	[Trigger ctrl && (status == S) && has(A:backhop) && C:backhop]
		-> backhop
		
	// Middle-punch
	[Trigger ctrl && (status == S) && has(A:midpunch) && keypress("B1")]
		-> midpunch

	// Standing physics
	[Trigger physics == PhyStanding]
	vel.x = vel.x * standing.friction.x
	if(abs(vel.x) < 0.1) { vel.x = 0.0 }

	// Crouching physics
	[Trigger physics == PhyCrouching]
	vel.x = vel.x * crouching.friction.x
	if(abs(vel.x) < 0.1) { vel.x = 0.0 }

	// Air physics
	[Trigger physics == PhyAir]
	vel.y = vel.y + air.gravity.y
	if(pos.y < 0.0) { 
		vel.y = 0.0
		pos.y = 0.0
	}
	
		
	// Standing Damage
	[Trigger ishit() && !(keyhold("B") && strhas(hitget("guardflag"), "S"))]
		// Set pause
		ptime = hitget("pausetime")
		pause(ptime)
		opponent{pause(ptime)}

		// Air damage
		if(status == A){
			anim = A:damageFall
			vel.x = hitget("air.velocity.x") * (facing ? -1.0 : 1.0)
			vel.y = 0.0
			clearhit()
			-> airDamage
		}
		
		// Falls
		if( hithas("fall") && hitget("fall") ) { 
			anim = A:damageFall
			vel.x = hitget("air.velocity.x") * (facing ? -1.0 : 1.0)
			vel.y = 15.0
			clearhit()
			-> airDamage
		}
		
		// Set ground vel
		vel.x = hitget("ground.velocity.x") * (facing ? -1.0 : 1.0)
		slidetime = hitget("ground.slidetime")
	
		// Ground Damages
		if( status == S ){
			switch hitget("damageanim.type") {
				"L": { if(hitget("damageanim.height") == "H") { anim = A:damageSHL } else { anim = A:damageSLL } }
				"M": { if(hitget("damageanim.height") == "H") { anim = A:damageSHM } else { anim = A:damageSLM } }
				"H": { if(hitget("damageanim.height") == "H") { anim = A:damageSHH } else { anim = A:damageSLH } }
			}
		}
		else {
			switch hitget("damageanim.type") {
				"L": { if(hitget("damageanim.height") == "H") { anim = A:damageCHL } else { anim = A:damageCLL } }
				"M": { if(hitget("damageanim.height") == "H") { anim = A:damageCHM } else { anim = A:damageCLM } }
				"H": { if(hitget("damageanim.height") == "H") { anim = A:damageCHH } else { anim = A:damageCLH } }
			}
		}
		
		clearhit()
		-> groundDamage